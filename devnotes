src/
├─ api/                  # 所有后端请求封装
│   └─ getQuestion.js
├─ components/           # 可复用的基础组件
│   └─ Header.jsx
├─ pages/                # 页面（每个路由一个子目录）
│   ├─ question/
│   │   ├─ index.jsx     # 页面主组件
│   │   └─ users.css     # 页面样式
│   └─ About/
│       ├─ index.jsx
│       └─ about.css
├─ assets/               # 静态资源
│   ├─ images/
│   │   └─ logo.png
│   └─ css/              # 全局样式（非页面专属）
│       └─ global.css
├─ App.jsx               # 应用入口
└─ index.js              # React DOM 挂载点



📝 功能优先级矩阵（MVP → 迭代）
✅ Must Have （必须要有 → MVP 就要实现）
这些是 核心功能，没有就无法使用：
用户注册 / 登录（最简邮箱 + 密码 / 验证码）
每日哲学问题获取（固定问题或简单问题库）
写作回答 & 保存
历史回答查看（时间顺序）
基本数据存储（SQLite/Postgres）
简洁的写作界面（React 前端）



1. 用户注册 / 登录
流程图
[用户输入邮箱/密码] 
     ↓
[前端调用 /auth/signup 或 /auth/login API]
     ↓
[后端 FastAPI 校验 → 生成 JWT Token]
     ↓
[返回 Token 给前端 → 保存到 localStorage]
     ↓
[后续请求携带 Authorization: Bearer <token>]


2. 获取每日哲学问题
流程图
[前端加载页面]
     ↓
[GET /question API]
     ↓
[后端返回今日问题]
     ↓
[前端显示问题]





3. 写作回答并保存
流程图
[用户写回答 → 点击提交]
     ↓
[前端 POST /answer 携带 token + 内容]
     ↓
[后端解码 token → 获取 user_id → 写入数据库]
     ↓
[返回成功状态]




4. 查看历史回答
流程图
[用户点击查看历史回答]
     ↓
[前端 GET /answers 携带 token]
     ↓
[后端解码 token → 查询该用户的回答]
     ↓
[返回回答列表 → 前端渲染]



✅ 总结一下：
用户注册/登录 → FastAPI + JWT
每日问题获取 → 简单 API（MVP 先写死问题）
写作回答保存 → 前端提交 + 后端存 DB
历史回答查看 → 前端获取 + 渲染


TODO
用户设置
编辑个人信息（昵称、头像）
修改密码
编辑/删除历史回答

用户自定义问题
用户自定义问题序列
用户自定义及写作计划

多个问题标签（多对多表）



alembic revision --autogenerate -m "initial schema" 
alembic upgrade head  




👍 Should Have （重要，但可以二期实现）
这些功能能明显提升用户体验与留存：
编辑/删除回答
草稿自动保存（防止丢失内容）
问题分类（幸福、自由、存在…）
回答分页 / 搜索 / 筛选
写作打卡 & 连续天数统计
邮件/推送提醒每日问题
响应式 UI（移动端优化）





💡 Could Have （锦上添花，可以后期增加）
这些功能不是必需，但会让产品更有吸引力：
富文本编辑（加粗、斜体、段落等）
写作数据统计（字数、写作时长）
回答分享（海报/社交平台）
社区功能（匿名分享、点赞、评论）
关注他人 / 匿名讨论区


🚫 Won’t Have (暂时不做 / 未来考虑)
这些功能在 MVP 阶段不必考虑：
AI 哲学导师（深度 NLP 分析、情绪识别）
个性化推荐问题
后台管理系统（复杂统计、权限管理）
企业版（心理咨询/团队培训）